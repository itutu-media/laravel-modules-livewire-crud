<?php

/**
 * Generated by ITUTUMedia - Laravel Modules Livewire CRUD on [date]
 * GitHub: https://github.com/itutu-media/laravel-modules-livewire-crud.git
 */

namespace [namespace];

use WireUi\Traits\Actions;
use Livewire\Attributes\On;
use Modules\Core\App\Components\DataTableComponent;
use Rappasoft\LaravelLivewireTables\Views\Column;
use [model_import];
use [action_import];

class [class] extends DataTableComponent
{
  use Actions;

  public array $actionButtons = [
      'edit'   => ['id', 'modal', 'formModal', ['[module]::[model_low_case].form', 'show']], //! diganti 
      'delete' => 'id'
  ];

  public string $tableName                 = '[model_low_case]-table';  //! diganti 
  public string $module                    = '[model_low_case]';  //! diganti 
  public bool $deleteConfirmationModal     = false;
  public bool $bulkDeleteConfirmationModal = false;
  public bool $forceDelete                 = false;
  public bool $softDelete                  = false;
  public $key;
  
  protected $model = [model]::class;

    #[On('refreshTable')]
    public function refreshTable()
    {
      $this->dispatch('$refresh')->self();
    }

    public function configure(): void
    {
      $this->setPrimaryKey('id')
        ->setDefaultSort('id', 'asc')
        ->setConfigurableAreas([
          'toolbar-left-start' => [
            'partials.table.toolbar-left-start', [
              'add' => ['modal', 'formModal', ['[module]::[model_low_case].form', 'create']],
            ]
          ],
          'after-pagination' => [
            'partials.delete-confirmation', [
                'softDelete' => $this->softDelete
            ]
          ]
        ])
        ->setHideBulkActionsWhenEmptyEnabled()
        ->setBulkActions([
          'bulkDelete' => 'Bulk Delete',
        ]);
    }

  public function columns(): array
  {
    return [
      [columns]
    ];
  }
  
  private function _notif($message, $icon)
  {
    $this->notification([
      'title'       => NULL,
      'description' => $message,
      'icon'        => $icon
    ]);
    $this->dispatch('$refresh')->self();
  }

  #[On('resetDeleteConfirmation')]
  public function resetDeleteConfirmation()
  {
    $this->reset('forceDelete', 'key');
  }

  #[On('delete')]
  public function delete([action] $action)
  {
    try {
      $action->delete($this->key, $this->forceDelete);
      $this->deleteConfirmationModal = false;
      $this->_notif('Data berhasil dihapus', 'success');
    } catch (\Exception $e) {
      $this->_notif($e->getMessage(), 'error');
    }
  }

  public function restore([action] $action, $id)
  {
    try {
      $action->restore($id);
      $this->_notif('Data berhasil dipulihkan', 'success');
    } catch (\Exception $e) {
      $this->_notif($e->getMessage(), 'error');
    }
  }

  public function bulkDelete()
  {
    $this->bulkDeleteConfirmationModal = true;
  }

  public function deleteRestoreSelected([action] $action)
  {
    try {
      $i = $j = 0;
      foreach ($this->getSelected() as $item) {
          $response = $action->deleteOrRestore($item, [$i, $j]);
          $i = $response[0];
          $j = $response[1];
      }
      $this->clearSelected();
      if ($i > 0)
          $this->_notif("$i Data berhasil dipulihkan", 'success');
      if ($j > 0)
          $this->_notif("$j Data berhasil dihapus", 'success');

      $this->bulkDeleteConfirmationModal = false;
    } catch (\Exception $e) {
      $this->_notif($e->getMessage(), 'error');
    }
  }
}
